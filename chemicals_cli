def main_menu():
    while True:
        print("""
Chemicals API CLI Navigation Menu
----------------------------------

1. Acentric Factor
2. Air
3. Critical Properties
4. Dipole Moment
5. DIPPR Fit Equations
6. Periodic Table
7. Environmental Properties
8. Exceptions Generated by Chemicals
9. Ideal VLE and Flash Initialization
10. Heat Capacity
11. IAPWS (International Association for the Properties of Water and Steam)
12. Chemical Metadata
13. Surface Tension
14. Lennard-Jones Models
15. Miscellaneous Data (chemicals.miscdata)
16. Chemical Geometry (chemicals.molecular_geometry)
17. Support for Numba (chemicals.numba)
18. Relative Permittivity/Dielectric Constant (chemicals.permittivity)
19. Phase Change Properties (chemicals.phase_change)
20. Rachford-Rice Equation Solvers (chemicals.rachford_rice)
21. Chemical Reactions (chemicals.reaction)
22. Refractive Index (chemicals.refractivity)
23. Health, Safety, and Flammability Properties (chemicals.safety)
24. Solubility (chemicals.solubility)
25. ITS Temperature Scales (chemicals.temperature)
26. Thermal Conductivity (chemicals.thermal_conductivity)
27. Triple Point (chemicals.triple)
28. Utilities (chemicals.utils)
29. Support for pint Quantities (chemicals.units)
30. Vapor Pressure (chemicals.vapor_pressure)
31. Support for Numpy Arrays (chemicals.vectorized)
32. Viscosity (chemicals.viscosity)
33. Density/Volume (chemicals.volume)
              
Please select a category or type 'exit' to quit.
        """)

        choice = input("Enter your choice: ").lower()
        if choice == 'exit':
            break
        elif choice == '1':
            acentric_factor_menu()
        elif choice == '2':
            air_menu()
        elif choice == '3':
            critical_properties_menu()
        elif choice == '4':
            dipole_moment_menu()
        elif choice == '5':
            dippr_fit_equations_menu()
        elif choice == '6':
            periodic_table_menu()
        elif choice == '7':
            environmental_properties_menu()
        elif choice == '8':
            exceptions_menu()
        elif choice == '9':
            ideal_vle_flash_menu()
        elif choice == '10':
            heat_capacity_menu()
        elif choice == '11':
            iapws_menu()
        elif choice == '12':
            chemical_metadata_menu()
        elif choice == '13':
            surface_tension_menu()
        elif choice == '14':
            lennard_jones_menu()
        elif choice == '15':
            miscdata_menu()
        elif choice == '16':
            molecular_geometry_menu()
        elif choice == '17':
            numba_menu()
        elif choice == '18':
            permittivity_menu()
        elif choice == '19':
            phase_change_menu()
        elif choice == '20':
            rachford_rice_menu()
        elif choice == '21':
            reaction_menu()
        elif choice == '22':
            refractivity_menu()
        elif choice == '23':
            safety_menu()
        elif choice == '24':
            solubility_menu()
        elif choice == '25':
            temperature_menu()
        elif choice == '26':
            thermal_conductivity_menu()
        elif choice == '27':
            triple_menu()
        elif choice == '28':
            utilities_menu()
        elif choice == '29':
            units_menu()
        elif choice == '30':
            vapor_pressure_menu()
        elif choice == '31':
            vectorized_menu()
        elif choice == '32':
            viscosity_menu()
        elif choice == '33':
            volume_menu()
        else:
            print("Invalid choice, please try again.")


def acentric_factor_menu():
    while True:
        print("""
Acentric Factor
---------------
1. Lookup Functions
2. Definitions
3. Correlations
Type 'back' to return to the main menu.
        """)
        
        choice = input("Enter your choice: ").lower()
        if choice == 'back':
            break
        elif choice in ['1', '2', '3']:
            print(f"Selected Acentric Factor option {choice}")
            # Here you would call the specific function or display the information related to the choice
        else:
            print("Invalid choice, please try again.")

def air_menu():
    while True:
        print("""
Air
---
1. Dry Air Basic Solvers
2. Dry Air Bubble/Dew Points
3. Dry Air Constants
4. Dry Air Ideal Gas Terms
5. Dry Air Residual Terms
6. Humid Air Virial Terms
7. Henryâ€™s Law for Air in Water

Type 'back' to return to the main menu.
        """)

        choice = input("Enter your choice: ").lower()
        if choice == 'back':
            break
        elif choice == '1':
            dry_air_basic_solvers_menu()
        elif choice == '2':
            dry_air_bubble_dew_points_menu()
        elif choice == '3':
            dry_air_constants_menu()
        # Continue with the rest of the subcategories
        else:
            print("Invalid choice, please try again.")

def dry_air_basic_solvers_menu():
    while True:
        print("""
Dry Air Basic Solvers
---------------------
1. Calculate density (lemmon2000_rho)
2. Calculate pressure (lemmon2000_P)
3. Calculate temperature (lemmon2000_T)

Type 'back' to return to the Air menu.
        """)
        choice = input("Enter your choice: ").lower()
        if choice == 'back':
            break
        elif choice == '1':
            print("Function: chemicals.air.lemmon2000_rho(T, P)\n"
                  "Calculate the density of air given a temperature (T in K) and pressure (P in Pa).\n"
                  "This solution is iterative and has been tested only for gas solutions.")
            # Here you can add code to call the actual function if you are implementing an interactive CLI
        elif choice == '2':
            print("Function: chemicals.air.lemmon2000_P(T, rho)\n"
                  "Calculate the pressure of air given a temperature (T in K) and molar density (rho in mol/m^3).\n"
                  "This calculation is direct with no iteration required.")
            # Here you can add code to call the actual function if you are implementing an interactive CLI
        elif choice == '3':
            print("Function: chemicals.air.lemmon2000_T(P, rho)\n"
                  "Calculate the temperature of air given a pressure (P in Pa) and molar density (rho in mol/m^3).\n"
                  "This solution is iterative and has been tested only for gas solutions.")
            # Here you can add code to call the actual function if you are implementing an interactive CLI
        else:
            print("Invalid choice, please try again.")

def critical_properties_menu():
    while True:
        print("""
Critical Properties
------------------
1. Critical Temperature
2. Critical Pressure
3. Critical Volume
4. Critical Compressibility Factor
5. Critical Property Relationships
6. Critical Temperature of Mixtures
7. Critical Volume of Mixtures
              
type back to return to the main menu.
        """)

        choice = input("Enter your choice: ").lower()
        if choice == 'back':
            break
        elif choice in ['1', '2', '3', '4', '5', '6', '7']:
            print(f"Selected Critical Properties option {choice}")
            # Here you would call the specific function or display the information related to the choice
        else:
            print("Invalid choice, please try again.")
              
              
if __name__ == "__main__":
    main_menu()
